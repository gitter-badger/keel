apply {
    plugin 'jacoco'        // 覆盖率报告
    plugin 'codenarc'      // Groovy静态检查
}

/**
 * CodeNarc Plugin Task Settings
 */
codenarc {
    toolVersion = codenarc_version
    configFile = rootProject.file('conf/engineering-process/static-checking/groovy/codenarc.gcfg')
    ignoreFailures = Boolean.FALSE
}


dependencies {

    // Spring Framework
    testImplementation "org.springframework.boot:spring-boot-starter-test:$spring_boot_starter_version"
    // Spock Framework
    testImplementation "org.spockframework:spock-spring:$spock_framework_version"
    // Spock Reports
    testRuntimeOnly("com.athaydes:spock-reports:$spock_reports_version") {
        transitive = false
    }

}


jacoco {
    toolVersion = jacoco_version
}

/**
 * 分支覆盖率达到100%
 * TODO 由于groovy在编译时会生成无效字节码，所以指令覆盖率无法达到100%，等待官方修复，详见
 * https://github.com/jacoco/jacoco/issues/884
 * http://groovy.329449.n5.nabble.com/Groovy-2-5-4-generates-dead-code-td5755188.html
 */
jacocoTestCoverageVerification {
    violationRules {
        // rule #1：bundle分支覆盖率
        rule {
            enabled = Boolean.valueOf(System.getProperty('jacoco.bundleBranchCoverageRuleEnabled', Boolean.TRUE.toString()))
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = System.getProperty('jacoco.bundleBranchCoveredRatio', '1.0') as BigDecimal
            }
        }
        // rule #2：bundle指令覆盖率
        rule {
            enabled = Boolean.valueOf(System.getProperty('jacoco.bundleInstructionCoverageRuleEnabled', Boolean.TRUE.toString()))
            limit {
                minimum = System.getProperty('jacoco.bundleInstructionCoveredRatio', '0.9') as BigDecimal
            }
        }
        // rule #3：package指令覆盖率
        rule {
            enabled = Boolean.valueOf(System.getProperty('jacoco.packageInstructionCoverageRuleEnabled', Boolean.TRUE.toString()))
            element = 'PACKAGE'
            limit {
                minimum = System.getProperty('jacoco.packageInstructionCoveredRatio', '0.9') as BigDecimal
            }
        }
    }
}

/**
 * 覆盖率报告排除main class
 */
jacocoTestReport {
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect { dir ->
            fileTree dir: dir, exclude: System.getProperty('jacoco.reportExclusion', '**/app/**/*.class')
        })
    }
}

/**
 * 一些任务依赖和属性设置
 */
check.dependsOn jacocoTestCoverageVerification
test.finalizedBy jacocoTestReport, jacocoTestCoverageVerification
tasks.withType(Test) {
    // 这是为了解决在项目根目录上执行test时Jacoco找不到依赖的类的问题
    systemProperties.'user.dir' = workingDir
}
